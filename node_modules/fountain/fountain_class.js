var client = require('artnet').Client;
var fs = require('fs');

//var lame = require('lame');
//var Speaker = require('speaker');

eval(fs.readFileSync(__dirname + '/config.js', encoding = "ascii"));

var ips = [];
ips[1] = '10.33.22.102';
ips[2] = '10.33.22.103';
ips[3] = '10.33.22.104';


var clients = [];
for (var i in ips) {
    var ip = ips[i];
    var _client = client.createClient(ip, 6454);
    _client.UNIVERSE[0] = i;
    clients[i] = _client;
}


function Light(x, y, id, universe, real, channel, fountain) {
    this.init(x, y, id, universe, real, channel, fountain);
}

Light.prototype = {
    universe: 1,
    real: 0,
    id: 0,
    R: 0,
    G: 0,
    B: 0,
    Rchannel: 0,
    Gchannel: 0,
    Bchannel: 0,
    channel: 0,
    x: 0,
    fountain: false,
    y: 0,

    setColor: function(r, g, b) {

        var self = this;

        this.fountain.addFunction(function() {
            self.R = r;
            self.G = g;
            self.B = b;
        });


    },
    getColor: function() {
        var self = this;

        return makeColor(self.R, self.G, self.B);
    },
    init: function(x, y, id, universe, real, channel, fountain) {

        this.universe = universe;
        this.id = id;
        this.real = real;
        this.channel = channel;
        this.Rchannel = channel;
        this.Gchannel = channel + 1;
        this.Bchannel = channel + 2;
        this.fountain = fountain;
        this.x = x;
        this.y = y;
    },
}


function Fountain() {
    this.init();
}

Fountain.prototype = {
    SEND_DATA: [],
    lightList: [],
    displayTime: 0.1,
    playAudio: function(file) {
        /*
      	fs.createReadStream(file)
  		  .pipe(new lame.Decoder())
  		  .on('format', function (format) {
  		    this.pipe(new Speaker(format));
  		});
*/
    },
    addFunction: function(funct) {
        var dTime = this.displayTime * 1000;
        setTimeout(funct, dTime);
    },
    light: function(id) {
        return this.lightList[id];
    },

    init: function() {
        this.SEND_DATA[1] = [];
        this.SEND_DATA[2] = [];
        this.SEND_DATA[3] = [];
        var self = this;

        for (var i in LIGHT_DATA) {
            var data = LIGHT_DATA[i];
            this.lightList[i] = new Light(data[0], data[1], i, data[3], data[4], data[5], self);
        }

    },
    display: function(time) {
        var self = this;
        if (!time) {
            time = 0.025;
        }
        this.displayTime += time;
        setTimeout(function() {
            self.flush();
        }, self.displayTime * 1000);
    },
    flush: function() {
        for (var i in this.lightList) {
            var light = this.lightList[i];
            var uni = light.universe;
            this.SEND_DATA[uni][light.Rchannel] = light.G; //  wtf!!!
            this.SEND_DATA[uni][light.Bchannel] = light.R; //  wtf!!!
            this.SEND_DATA[uni][light.Gchannel] = light.B; //  wtf!!!

        }
        console.log(this.SEND_DATA);
        for (var uni in this.SEND_DATA) {
            var client = clients[uni];
            client.send(this.SEND_DATA[uni]);
        }

    },
    evalFile: function(file, log) {
        var _eval = (fs.readFileSync(file, encoding = "ascii"));
        return eval(_eval);
    },
    Helpers: {
        shuffle: function(array) {
            for (var j, x, i = array.length; i; j = parseInt(Math.random() * i), x = array[--i], array[i] = array[j], array[j] = x);
            return (array);
        }

    },

    randomColor: function() {
        return makeColor(Math.round(Math.random() * 255), Math.round(Math.random() * 255), Math.round(Math.random() * 255));
    },
}

exports.createFountain = function() {
    return new Fountain();
}




function rgbToHex(r, g, b) {
    r = r.toString(16);
    g = g.toString(16);
    b = b.toString(16);

    if (r.length == 1) r = '0' + r;
    if (g.length == 1) g = '0' + g;
    if (b.length == 1) b = '0' + b;

    return (r + g + b).toUpperCase();
}



_color = function(r, g, b, a) {
    this.r = r;
    this.g = g;
    this.b = b;
    this.a = a;
    if (!a) {
        a = 100;
    }
    this.realValue = {
        r: r,
        g: g,
        b: b
    };
    this.toRgba = function() {
        return rgbToHex(r, g, b);
    };
};

function array_value(arr, key) {
    return arr[key];
}

function rangeSimple(start, end) {

    var arr = [];
    for (var i = start; i < end; i++) {
        arr.push(i);
    }
    return arr;


}


var makeColor = function(r, g, b, a) {

    if (!a) {
        a = 100;
    }
    return new _color(r, g, b, a);
}


    function range(start, end) {

        var arr = new Array();
        for (var i = start; i < end; i++) {
            arr[i] = parseInt(i);
        }
        return arr;
    }

    function rangeReverse(start, end) {

        var arr = new Array();
        for (var i = end; i >= start; i--) {
            arr[end - i] = i;
        }

        return arr;

    }